-profilo di carico nuovo con "statistiche"
-Dimensionamento pannelli per caso di prova
-piu' ciclate sull'ottimizzatore
-dati vendita energia

-vendita energia da batteiria

-stato di batteria preservato durante i test o più viciino possibile all'inizio

-grafici vari (confronto con e senza magari)

-dimensionamento dell ottimizzatore

-stampa strategia in maniera leggibile ora per ora ( ore 12: carico del 20% ,mettendo in forma tabellare i risultati)

-try sul fetch dei dati futuri di costo(esempio : sono le 12 e la strategia non può avere i dati di domani dei costi, cosa fare?
usare quelli di oggi per avere quelli di domani finchè non saranno caricati)
-possibilità di vendere l'energia contenuta all'interno della batteria


-Mettere il calcolo del costo per fascia e non per ora



    current_datetime = datetime.now()
    current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
    datetime_values = [current_hour + timedelta(hours=i) for i in range(24)]
    soc_dataframe = pd.DataFrame({"time": np.arange(len(actual_percentage)), "soc": actual_percentage})
    sum_dataframe = pd.DataFrame({"time": datetime_values, "sum": sum})

    plot_graph(expected_production, expected_production["time"], expected_production["production"], "time",
               "production", "Expected Production", "Blue")

    plot_graph(soc_dataframe, soc_dataframe["time"], soc_dataframe["soc"], "time", "soc", "Expected Soc", "Green")
    plot_graph(sum_dataframe, "time", "sum", "time", "Pecunia", "Expected Money", "Red")
    plot_graph(data["estimate"], data["estimate"]["ora"], data["estimate"]["consumo"], "time", "Previsione Consumo", "Expected Load", "Red")






12/12
 - controllare se sum viene moltiplicato
- fare i delta della batteria e plottarli [FATTO]
- 

Situazioni:
- Solo consumi
    - Salerno
    - Milano
    - Lecce
    - Roma    
- Solo consumi e pannelli
    - Salerno
    - Milano
    - Lecce
    - Roma 
- Consumi, Pannelli e batteria
    - Salerno
    - Milano
    - Lecce
    - Roma 

Fare i database dei consumi